=begin
#Aspose.Diagram Cloud API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module AsposeDiagramCloud

  class ImageSaveOptions
    attr_accessor :save_format

    attr_accessor :default_font

    attr_accessor :area

    attr_accessor :export_guide_shapes

    attr_accessor :page_size

    attr_accessor :is_export_comments

    attr_accessor :image_brightness

    attr_accessor :image_contrast

    attr_accessor :jpeg_quality

    attr_accessor :page_count

    attr_accessor :resolution

    attr_accessor :scale

    attr_accessor :tiff_compression

    attr_accessor :export_hidden_page

    attr_accessor :image_color_mode

    attr_accessor :page_index

    attr_accessor :save_foreground_pages_only

    attr_accessor :same_as_pdf_conversion_area

    attr_accessor :pixel_offset_mode

    attr_accessor :smoothing_mode

    attr_accessor :compositing_quality

    attr_accessor :interpolation_mode

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'save_format' => :'SaveFormat',
        :'default_font' => :'DefaultFont',
        :'area' => :'Area',
        :'export_guide_shapes' => :'ExportGuideShapes',
        :'page_size' => :'PageSize',
        :'is_export_comments' => :'IsExportComments',
        :'image_brightness' => :'ImageBrightness',
        :'image_contrast' => :'ImageContrast',
        :'jpeg_quality' => :'JpegQuality',
        :'page_count' => :'PageCount',
        :'resolution' => :'Resolution',
        :'scale' => :'Scale',
        :'tiff_compression' => :'TiffCompression',
        :'export_hidden_page' => :'ExportHiddenPage',
        :'image_color_mode' => :'ImageColorMode',
        :'page_index' => :'PageIndex',
        :'save_foreground_pages_only' => :'SaveForegroundPagesOnly',
        :'same_as_pdf_conversion_area' => :'SameAsPdfConversionArea',
        :'pixel_offset_mode' => :'PixelOffsetMode',
        :'smoothing_mode' => :'SmoothingMode',
        :'compositing_quality' => :'CompositingQuality',
        :'interpolation_mode' => :'InterpolationMode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'save_format' => :'String',
        :'default_font' => :'String',
        :'area' => :'RectangleF',
        :'export_guide_shapes' => :'BOOLEAN',
        :'page_size' => :'PageSize',
        :'is_export_comments' => :'BOOLEAN',
        :'image_brightness' => :'Float',
        :'image_contrast' => :'Float',
        :'jpeg_quality' => :'Integer',
        :'page_count' => :'Integer',
        :'resolution' => :'Float',
        :'scale' => :'Float',
        :'tiff_compression' => :'String',
        :'export_hidden_page' => :'BOOLEAN',
        :'image_color_mode' => :'String',
        :'page_index' => :'Integer',
        :'save_foreground_pages_only' => :'BOOLEAN',
        :'same_as_pdf_conversion_area' => :'BOOLEAN',
        :'pixel_offset_mode' => :'String',
        :'smoothing_mode' => :'String',
        :'compositing_quality' => :'String',
        :'interpolation_mode' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'SaveFormat')
        self.save_format = attributes[:'SaveFormat']
      end

      if attributes.has_key?(:'DefaultFont')
        self.default_font = attributes[:'DefaultFont']
      end

      if attributes.has_key?(:'Area')
        self.area = attributes[:'Area']
      end

      if attributes.has_key?(:'ExportGuideShapes')
        self.export_guide_shapes = attributes[:'ExportGuideShapes']
      end

      if attributes.has_key?(:'PageSize')
        self.page_size = attributes[:'PageSize']
      end

      if attributes.has_key?(:'IsExportComments')
        self.is_export_comments = attributes[:'IsExportComments']
      end

      if attributes.has_key?(:'ImageBrightness')
        self.image_brightness = attributes[:'ImageBrightness']
      end

      if attributes.has_key?(:'ImageContrast')
        self.image_contrast = attributes[:'ImageContrast']
      end

      if attributes.has_key?(:'JpegQuality')
        self.jpeg_quality = attributes[:'JpegQuality']
      end

      if attributes.has_key?(:'PageCount')
        self.page_count = attributes[:'PageCount']
      end

      if attributes.has_key?(:'Resolution')
        self.resolution = attributes[:'Resolution']
      end

      if attributes.has_key?(:'Scale')
        self.scale = attributes[:'Scale']
      end

      if attributes.has_key?(:'TiffCompression')
        self.tiff_compression = attributes[:'TiffCompression']
      end

      if attributes.has_key?(:'ExportHiddenPage')
        self.export_hidden_page = attributes[:'ExportHiddenPage']
      end

      if attributes.has_key?(:'ImageColorMode')
        self.image_color_mode = attributes[:'ImageColorMode']
      end

      if attributes.has_key?(:'PageIndex')
        self.page_index = attributes[:'PageIndex']
      end

      if attributes.has_key?(:'SaveForegroundPagesOnly')
        self.save_foreground_pages_only = attributes[:'SaveForegroundPagesOnly']
      end

      if attributes.has_key?(:'SameAsPdfConversionArea')
        self.same_as_pdf_conversion_area = attributes[:'SameAsPdfConversionArea']
      end

      if attributes.has_key?(:'PixelOffsetMode')
        self.pixel_offset_mode = attributes[:'PixelOffsetMode']
      end

      if attributes.has_key?(:'SmoothingMode')
        self.smoothing_mode = attributes[:'SmoothingMode']
      end

      if attributes.has_key?(:'CompositingQuality')
        self.compositing_quality = attributes[:'CompositingQuality']
      end

      if attributes.has_key?(:'InterpolationMode')
        self.interpolation_mode = attributes[:'InterpolationMode']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @save_format.nil?
        invalid_properties.push("invalid value for 'save_format', save_format cannot be nil.")
      end

      if @area.nil?
        invalid_properties.push("invalid value for 'area', area cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @save_format.nil?
      save_format_validator = EnumAttributeValidator.new('String', ["VDX", "VSX", "VTX", "TIFF", "PNG", "BMP", "EMF", "JPEG", "PDF", "XPS", "GIF", "HTML", "SVG", "SWF", "XAML", "VSDX", "VSTX", "VSSX", "VSDM", "VSSM", "VSTM"])
      return false unless save_format_validator.valid?(@save_format)
      return false if @area.nil?
      tiff_compression_validator = EnumAttributeValidator.new('String', ["None", "Rle", "Ccitt3", "Ccitt4", "Lzw"])
      return false unless tiff_compression_validator.valid?(@tiff_compression)
      image_color_mode_validator = EnumAttributeValidator.new('String', ["None", "Grayscale", "BlackAndWhite"])
      return false unless image_color_mode_validator.valid?(@image_color_mode)
      pixel_offset_mode_validator = EnumAttributeValidator.new('String', ["Default", "HighSpeed", "HighQuality", "None", "Half", "Invalid"])
      return false unless pixel_offset_mode_validator.valid?(@pixel_offset_mode)
      smoothing_mode_validator = EnumAttributeValidator.new('String', ["Default", "HighSpeed", "HighQuality", "None", "AntiAlias", "Invalid"])
      return false unless smoothing_mode_validator.valid?(@smoothing_mode)
      compositing_quality_validator = EnumAttributeValidator.new('String', ["Default", "HighSpeed", "HighQuality", "GammaCorrected", "AssumeLinear", "Invalid"])
      return false unless compositing_quality_validator.valid?(@compositing_quality)
      interpolation_mode_validator = EnumAttributeValidator.new('String', ["Default", "Low", "High", "Bilinear", "Bicubic", "NearestNeighbor", "HighQualityBilinear", "HighQualityBicubic", "Invalid"])
      return false unless interpolation_mode_validator.valid?(@interpolation_mode)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] save_format Object to be assigned
    def save_format=(save_format)
      validator = EnumAttributeValidator.new('String', ["VDX", "VSX", "VTX", "TIFF", "PNG", "BMP", "EMF", "JPEG", "PDF", "XPS", "GIF", "HTML", "SVG", "SWF", "XAML", "VSDX", "VSTX", "VSSX", "VSDM", "VSSM", "VSTM"])
      unless validator.valid?(save_format)
        fail ArgumentError, "invalid value for 'save_format', must be one of #{validator.allowable_values}."
      end
      @save_format = save_format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tiff_compression Object to be assigned
    def tiff_compression=(tiff_compression)
      validator = EnumAttributeValidator.new('String', ["None", "Rle", "Ccitt3", "Ccitt4", "Lzw"])
      unless validator.valid?(tiff_compression)
        fail ArgumentError, "invalid value for 'tiff_compression', must be one of #{validator.allowable_values}."
      end
      @tiff_compression = tiff_compression
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] image_color_mode Object to be assigned
    def image_color_mode=(image_color_mode)
      validator = EnumAttributeValidator.new('String', ["None", "Grayscale", "BlackAndWhite"])
      unless validator.valid?(image_color_mode)
        fail ArgumentError, "invalid value for 'image_color_mode', must be one of #{validator.allowable_values}."
      end
      @image_color_mode = image_color_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pixel_offset_mode Object to be assigned
    def pixel_offset_mode=(pixel_offset_mode)
      validator = EnumAttributeValidator.new('String', ["Default", "HighSpeed", "HighQuality", "None", "Half", "Invalid"])
      unless validator.valid?(pixel_offset_mode)
        fail ArgumentError, "invalid value for 'pixel_offset_mode', must be one of #{validator.allowable_values}."
      end
      @pixel_offset_mode = pixel_offset_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] smoothing_mode Object to be assigned
    def smoothing_mode=(smoothing_mode)
      validator = EnumAttributeValidator.new('String', ["Default", "HighSpeed", "HighQuality", "None", "AntiAlias", "Invalid"])
      unless validator.valid?(smoothing_mode)
        fail ArgumentError, "invalid value for 'smoothing_mode', must be one of #{validator.allowable_values}."
      end
      @smoothing_mode = smoothing_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] compositing_quality Object to be assigned
    def compositing_quality=(compositing_quality)
      validator = EnumAttributeValidator.new('String', ["Default", "HighSpeed", "HighQuality", "GammaCorrected", "AssumeLinear", "Invalid"])
      unless validator.valid?(compositing_quality)
        fail ArgumentError, "invalid value for 'compositing_quality', must be one of #{validator.allowable_values}."
      end
      @compositing_quality = compositing_quality
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] interpolation_mode Object to be assigned
    def interpolation_mode=(interpolation_mode)
      validator = EnumAttributeValidator.new('String', ["Default", "Low", "High", "Bilinear", "Bicubic", "NearestNeighbor", "HighQualityBilinear", "HighQualityBicubic", "Invalid"])
      unless validator.valid?(interpolation_mode)
        fail ArgumentError, "invalid value for 'interpolation_mode', must be one of #{validator.allowable_values}."
      end
      @interpolation_mode = interpolation_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          save_format == o.save_format &&
          default_font == o.default_font &&
          area == o.area &&
          export_guide_shapes == o.export_guide_shapes &&
          page_size == o.page_size &&
          is_export_comments == o.is_export_comments &&
          image_brightness == o.image_brightness &&
          image_contrast == o.image_contrast &&
          jpeg_quality == o.jpeg_quality &&
          page_count == o.page_count &&
          resolution == o.resolution &&
          scale == o.scale &&
          tiff_compression == o.tiff_compression &&
          export_hidden_page == o.export_hidden_page &&
          image_color_mode == o.image_color_mode &&
          page_index == o.page_index &&
          save_foreground_pages_only == o.save_foreground_pages_only &&
          same_as_pdf_conversion_area == o.same_as_pdf_conversion_area &&
          pixel_offset_mode == o.pixel_offset_mode &&
          smoothing_mode == o.smoothing_mode &&
          compositing_quality == o.compositing_quality &&
          interpolation_mode == o.interpolation_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [save_format, default_font, area, export_guide_shapes, page_size, is_export_comments, image_brightness, image_contrast, jpeg_quality, page_count, resolution, scale, tiff_compression, export_hidden_page, image_color_mode, page_index, save_foreground_pages_only, same_as_pdf_conversion_area, pixel_offset_mode, smoothing_mode, compositing_quality, interpolation_mode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AsposeDiagramCloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
